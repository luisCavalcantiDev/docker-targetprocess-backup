#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.3/releaser || { echo "cannot download releaser, but maybe not needed"; }
fi
source ./releaser
releaser_init

image_dir="./image"
version_file="${image_dir}/version.txt"

function verify_version_func {
  source "${version_file}"
  if [[ $(git tag | grep "${this_image_tag}" -c) -ne 0 ]]; then
    echo "git tag: ${this_image_tag} exists already, please bump version in "\
    "${version_file}"
    exit 1
  fi
  changelog_version=$(get_last_version_from_changelog "${changelog_file}")
  if [[ $(git tag | grep "${changelog_version}" -c) -ne 0 ]]; then
    echo "git tag: ${changelog_version} exists already, please bump version in "\
    "changelog file"
    exit 1
  fi
}

command="$1"
case "${command}" in
  build)
      # This is an automated build on docker hub, so
      # 1. we cannot have complicated build script or use --build-arg.
      # 2. the non-release commands must be invocable for anyone.
      source "${version_file}"
      cd ${image_dir}
      docker build -t ${this_image_name}:${this_image_tag} --rm .
      exit $?
      ;;
  itest)
      source "${version_file}"
      echo "Testing image: ${this_image_name}:${this_image_tag}"
      time bats "$(pwd)/test/integration/bats"
      exit $?
      ;;
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
      else
        source "${version_file}"
        old_version=${this_image_tag}
        next_version=$(bump_patch_version "${old_version}")
      fi
      set_version_in_changelog "${changelog_file}" "${next_version}"
      echo "this_image_tag=${next_version}" > ${version_file}
      echo "this_image_name=xmik/targetprocess-backup" >> ${version_file}
      echo "Version is set to: ${next_version}"
      exit $?
      ;;
  verify_version)
      verify_version_func
      exit $?
      ;;
  release)
      verify_version_func
      source "${version_file}"
      git tag "${this_image_tag}"
      git push origin "tags/${this_image_tag}"
      exit $?
      ;;
  # no publish task, the automated docker build is responsible for it
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
